{
	"name": "AddSurrogateKey",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stage1EmployeeRAWFolder",
						"type": "DatasetReference"
					},
					"name": "source11"
				},
				{
					"dataset": {
						"referenceName": "serverless_EmployeeET_table",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "serverless_EmployeeET_table",
						"type": "DatasetReference"
					},
					"name": "source3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Stage1EmployeeWSKeyFolder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "HashPK"
				},
				{
					"name": "HashPK2"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          fullname as string,",
				"          salary as integer,",
				"          age as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     purgeFiles: true) ~> source11",
				"source(output(",
				"          sKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: ' select  COALESCE(max(Skey),0) as sKey\\n  FROM [dbo].[employeeET]',",
				"     format: 'query') ~> source2",
				"source(output(",
				"          Id as integer,",
				"          Fullname as string,",
				"          Salary as integer,",
				"          Age as integer,",
				"          Skey as integer,",
				"          SurrogateKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source3",
				"exists1, source2 join(1==1,",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 keyGenerate(output(surrogatekey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(surrogatekey = surrogateKey1@surrogatekey + source2@sKey) ~> derivedColumn1",
				"source11 derive(PKHash = sha1(id,fullname)) ~> HashPK",
				"source3 derive(PKHash = sha1(Id,Fullname)) ~> HashPK2",
				"HashPK, HashPK2 exists(HashPK@PKHash == HashPK2@PKHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as string,",
				"          fullname as string,",
				"          salary as string,",
				"          age as string,",
				"          skey as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}